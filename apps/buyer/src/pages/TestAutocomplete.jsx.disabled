import { useState, useEffect } from 'react';
import AddressInput from '../components/AddressInput';
import googleMapsService from '../services/googleMapsService';

const TestAutocomplete = () => {
  const [address, setAddress] = useState({
    street: '',
    city: '',
    state: '',
    country: 'Nigeria'
  });
  
  const [diagnostics, setDiagnostics] = useState({
    googleLoaded: false,
    placesAvailable: false,
    apiKeyConfigured: false,
    serviceInitialized: false
  });

  const [testLog, setTestLog] = useState([]);

  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setTestLog(prev => [...prev, { message, type, timestamp }]);
    console.log(`[${timestamp}] ${message}`);
  };

  useEffect(() => {
    const runDiagnostics = async () => {
      addLog('üîç Running diagnostics...', 'info');
      
      // Check if Google Maps is loaded
      const googleLoaded = !!(window.google && window.google.maps);
      addLog(`Google Maps loaded: ${googleLoaded ? '‚úÖ' : '‚ùå'}`, googleLoaded ? 'success' : 'error');
      
      // Check if Places API is available
      const placesAvailable = !!(window.google && window.google.maps && window.google.maps.places);
      addLog(`Places API available: ${placesAvailable ? '‚úÖ' : '‚ùå'}`, placesAvailable ? 'success' : 'error');
      
      // Check API key
      const apiKey = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;
      const apiKeyConfigured = !!(apiKey && apiKey !== 'undefined');
      addLog(`API key configured: ${apiKeyConfigured ? '‚úÖ' : '‚ùå'}`, apiKeyConfigured ? 'success' : 'error');
      if (apiKeyConfigured) {
        addLog(`API key: ${apiKey.substring(0, 10)}...`, 'info');
      }
      
      // Try to initialize service
      addLog('Attempting to initialize Google Maps service...', 'info');
      const initialized = await googleMapsService.initialize();
      addLog(`Service initialized: ${initialized ? '‚úÖ' : '‚ùå'}`, initialized ? 'success' : 'error');
      
      setDiagnostics({
        googleLoaded,
        placesAvailable,
        apiKeyConfigured,
        serviceInitialized: initialized
      });
      
      if (!initialized) {
        addLog('‚ö†Ô∏è Google Maps failed to initialize. Autocomplete may not work.', 'warning');
      } else {
        addLog('üéâ All systems operational! Autocomplete should work.', 'success');
      }
    };

    runDiagnostics();
  }, []);

  const handleAddressChange = (newAddress) => {
    addLog(`üìç Address updated: ${JSON.stringify(newAddress)}`, 'success');
    setAddress(newAddress);
  };

  const getLogColor = (type) => {
    switch (type) {
      case 'success': return 'text-green-700 bg-green-50';
      case 'error': return 'text-red-700 bg-red-50';
      case 'warning': return 'text-yellow-700 bg-yellow-50';
      default: return 'text-gray-700 bg-gray-50';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            üó∫Ô∏è Google Maps Autocomplete Test
          </h1>
          <p className="text-gray-600">
            Use this page to test and debug the Google Maps address autocomplete feature
          </p>
        </div>

        {/* Diagnostics */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4">System Diagnostics</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className={`p-4 rounded-lg ${diagnostics.googleLoaded ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>
              <div className="flex items-center gap-2">
                <span className="text-2xl">{diagnostics.googleLoaded ? '‚úÖ' : '‚ùå'}</span>
                <span className="font-semibold">Google Maps Loaded</span>
              </div>
            </div>
            
            <div className={`p-4 rounded-lg ${diagnostics.placesAvailable ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>
              <div className="flex items-center gap-2">
                <span className="text-2xl">{diagnostics.placesAvailable ? '‚úÖ' : '‚ùå'}</span>
                <span className="font-semibold">Places API Available</span>
              </div>
            </div>
            
            <div className={`p-4 rounded-lg ${diagnostics.apiKeyConfigured ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>
              <div className="flex items-center gap-2">
                <span className="text-2xl">{diagnostics.apiKeyConfigured ? '‚úÖ' : '‚ùå'}</span>
                <span className="font-semibold">API Key Configured</span>
              </div>
            </div>
            
            <div className={`p-4 rounded-lg ${diagnostics.serviceInitialized ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>
              <div className="flex items-center gap-2">
                <span className="text-2xl">{diagnostics.serviceInitialized ? '‚úÖ' : '‚ùå'}</span>
                <span className="font-semibold">Service Initialized</span>
              </div>
            </div>
          </div>
        </div>

        {/* Test Form */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4">Test Address Input</h2>
          <p className="text-sm text-gray-600 mb-4">
            Start typing an address below. You should see autocomplete suggestions from Google Maps.
            Try typing: <strong>"15 Marina"</strong> or <strong>"Victoria Island"</strong>
          </p>
          
          <AddressInput
            value={address}
            onChange={handleAddressChange}
            label="Test Delivery Address"
            required={false}
          />
          
          {/* Current Address Display */}
          {(address.street || address.city) && (
            <div className="mt-6 p-4 bg-emerald-50 border border-emerald-200 rounded-lg">
              <h3 className="font-semibold text-emerald-900 mb-2">Current Address Value:</h3>
              <pre className="text-sm text-emerald-800 overflow-x-auto">
                {JSON.stringify(address, null, 2)}
              </pre>
            </div>
          )}
        </div>

        {/* Activity Log */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4">Activity Log</h2>
          <div className="space-y-2 max-h-96 overflow-y-auto">
            {testLog.map((log, index) => (
              <div key={index} className={`p-3 rounded text-sm ${getLogColor(log.type)}`}>
                <span className="font-mono text-xs mr-2">[{log.timestamp}]</span>
                {log.message}
              </div>
            ))}
          </div>
          {testLog.length === 0 && (
            <p className="text-gray-500 text-sm text-center py-4">
              No logs yet. Start typing in the address field above.
            </p>
          )}
        </div>

        {/* Instructions */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mt-6">
          <h3 className="font-bold text-blue-900 mb-2">üéØ How to Test:</h3>
          <ol className="list-decimal list-inside space-y-2 text-blue-800 text-sm">
            <li>Check that all diagnostics show ‚úÖ (green checkmarks)</li>
            <li>Click on the "Street Address" field above</li>
            <li>Type at least 2 characters (e.g., "15 Marina" or "Victoria Island")</li>
            <li>Wait ~0.5 seconds for suggestions to appear</li>
            <li>You should see a dropdown with Google Maps suggestions</li>
            <li>Click on any suggestion to auto-fill all fields</li>
            <li>Check the Activity Log below for detailed debugging info</li>
          </ol>
        </div>

        {/* Troubleshooting */}
        {(!diagnostics.googleLoaded || !diagnostics.placesAvailable || !diagnostics.serviceInitialized) && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 mt-6">
            <h3 className="font-bold text-red-900 mb-2">‚ö†Ô∏è Issues Detected:</h3>
            <ul className="list-disc list-inside space-y-2 text-red-800 text-sm">
              {!diagnostics.apiKeyConfigured && (
                <li>API key not configured. Add VITE_GOOGLE_MAPS_API_KEY to vite.config.js</li>
              )}
              {!diagnostics.googleLoaded && (
                <li>Google Maps script not loaded. Check API key and network connection.</li>
              )}
              {!diagnostics.placesAvailable && (
                <li>Places API not available. Ensure Places library is included in the script.</li>
              )}
              {!diagnostics.serviceInitialized && (
                <li>Service failed to initialize. Check browser console for detailed errors.</li>
              )}
            </ul>
            <div className="mt-4 p-4 bg-white rounded border border-red-300">
              <h4 className="font-semibold text-red-900 mb-2">Quick Fixes:</h4>
              <ol className="list-decimal list-inside space-y-1 text-red-800 text-sm">
                <li>Open browser console (F12) and check for errors</li>
                <li>Verify API key in <code className="bg-red-100 px-1 rounded">apps/buyer/vite.config.js</code></li>
                <li>Check that Places API is enabled in Google Cloud Console</li>
                <li>Verify your domain is whitelisted in API restrictions</li>
                <li>Reload the page (Ctrl+R or Cmd+R)</li>
              </ol>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TestAutocomplete;

