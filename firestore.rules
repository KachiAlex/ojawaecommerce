rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Notifications collection - users can access only their notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Allow any authenticated user to create notifications (for cross-user notifications)
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAuthenticated();
    }

    // Admin messages collection - only admins can read/write
    match /admin_messages/{messageId} {
      allow read, write: if isAdmin();
      allow list: if isAdmin();
    }

    // Admin settings collection - only admins can read/write
    match /admin_settings/{settingId} {
      allow read, write: if isAdmin();
      allow list: if isAdmin();
    }

    // Commission history - only admins can read/write/list
    match /commission_history/{recordId} {
      allow read, write: if isAdmin();
      allow list: if isAdmin();
    }

    // Ratings collection - users can create ratings for completed transactions; admins can read all
    match /ratings/{ratingId} {
      allow create: if isAuthenticated() && request.resource.data.raterId == request.auth.uid;
      allow read: if isOwner(resource.data.raterId) || isOwner(resource.data.rateeId) || isAdmin();
      allow list: if isAuthenticated();
    }

    // Conversations collection - participants only
    match /conversations/{conversationId} {
      function isParticipant() {
        return isAuthenticated() &&
          request.auth.uid in resource.data.participants;
      }
      allow read: if isParticipant() || isAdmin();
      allow create: if isAuthenticated() &&
        request.auth.uid in request.resource.data.participants;
      allow update, delete: if isParticipant() || isAdmin();
      allow list: if isAuthenticated();
    }

    // Messages collection - allowed if user participates in the parent conversation
    match /messages/{messageId} {
      function parentConversationId() {
        // For writes, conversationId comes from request.resource; for reads, from existing resource
        return request.resource != null && request.resource.data.conversationId != null
          ? request.resource.data.conversationId
          : resource.data.conversationId;
      }
      function parentConversation() {
        return get(/databases/$(database)/documents/conversations/$(parentConversationId()));
      }
      function isParentParticipant() {
        return isAuthenticated() &&
          request.auth.uid in parentConversation().data.participants;
      }
      allow read: if isParentParticipant() || isAdmin();
      allow create: if isParentParticipant();
      allow update, delete: if isParentParticipant() || isAdmin();
      allow list: if isAuthenticated();
    }

    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin(); // Admins can read all user profiles
      // Allow authenticated users to read any user profile (needed for cart/checkout to fetch vendor addresses)
      allow read: if isAuthenticated();
    }
    
    // Products collection - anyone can read, vendors can create/update their own
    match /products/{productId} {
      allow read: if true; // Public read access for products
      allow create: if isAuthenticated() && request.resource.data.vendorId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.vendorId == request.auth.uid || isAdmin();
      allow list: if true; // Allow aggregation queries (count operations)
    }
    
    // Categories collection - anyone can read, only admins can write
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Orders collection - users can read/write their own orders
    match /orders/{orderId} {
      // Allow create when authenticated user is the buyer specified in the new document
      allow create: if isAuthenticated() && request.resource.data.buyerId == request.auth.uid;
      // Read/update based on ownership (buyer or vendor) or admin access
      allow read: if isAuthenticated() && (resource.data.buyerId == request.auth.uid || resource.data.vendorId == request.auth.uid || isAdmin());
      allow update: if isAuthenticated() && (resource.data.buyerId == request.auth.uid || resource.data.vendorId == request.auth.uid || isAdmin());
      allow delete: if isAdmin(); // Only admins can delete orders
      allow list: if isAuthenticated(); // Allow aggregation queries (count operations)
    }
    
    // Cart collection - users can read/write their own cart
    match /carts/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Reviews collection - authenticated users can read, users can write their own reviews
    match /reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Wallets collection - users can read/write their own wallets
    match /wallets/{walletId} {
      // Allow read for wallet owner or admin
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Allow create for authenticated users creating their own wallet
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Allow update for wallet owner, admin, or when releasing escrow (buyer updating vendor's wallet)
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin() ||
        // Allow escrow release: any authenticated user can add to a wallet's balance
        (request.resource.data.balance > resource.data.balance)
      );
      // Allow delete for admin only
      allow delete: if isAdmin();
      // Allow list/query for authenticated users (needed for where queries)
      allow list: if isAuthenticated();
    }
    
    // Wallet transactions collection - users can read their own transactions
    match /wallet_transactions/{transactionId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Allow create for own transactions OR when type is 'escrow_release' (buyer releasing to vendor)
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.type == 'escrow_release'
      );
      allow update, delete: if isAdmin();
      allow list: if isAuthenticated();
    }
    
    // Stores collection - anyone can read public stores, vendors can manage their own
    match /stores/{storeId} {
      allow read: if true; // Public read access for stores
      allow create: if isAuthenticated() && request.resource.data.vendorId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.vendorId == request.auth.uid || isAdmin();
      allow list: if true; // Allow aggregation queries
    }
    
    // Delivery tracking collection - logistics partners can update their assigned deliveries, customers can read their own
    match /delivery_tracking/{trackingId} {
      allow read: if isAuthenticated() && 
        (resource.data.customerInfo.userId == request.auth.uid || 
         resource.data.logisticsPartnerId == request.auth.uid ||
         isAdmin());
      allow create: if isAuthenticated() && isAdmin(); // Only admins can create tracking records
      allow update: if isAuthenticated() && 
        (resource.data.logisticsPartnerId == request.auth.uid || isAdmin());
      allow list: if isAuthenticated();
    }
    
    // Disputes collection - users can read/write their own disputes
    match /disputes/{disputeId} {
      allow read, write: if isOwner(resource.data.userId);
      allow read: if isAdmin(); // Admins can read all disputes
      allow list: if isAuthenticated(); // Allow aggregation queries (count operations)
    }
    
    // Payout requests collection - users can read/write their own requests
    match /payout_requests/{requestId} {
      allow read, write: if isOwner(resource.data.userId);
      allow read: if isAdmin(); // Admins can read all payout requests
    }
    
           // Payouts collection - vendors can read/write their own payouts
           match /payouts/{payoutId} {
             allow read, write: if isOwner(resource.data.vendorId);
             allow create: if isAuthenticated() && request.auth.uid == request.resource.data.vendorId;
             allow read: if isAdmin(); // Admins can read all payouts
             allow list: if isAuthenticated(); // Allow aggregation queries (count operations)
           }

           // Logistics profiles collection - allow public reads for approved profiles; owners/admins can manage
           match /logistics_profiles/{profileId} {
             // Public can read approved profiles; owners and admins can read all
             allow read: if (
               resource.data.status == 'approved' ||
               isOwner(resource.data.userId) ||
               isAdmin()
             );
             // Allow list/query for authenticated users (needed for where queries)
             allow list: if isAuthenticated();
             // Create restricted to the profile owner
             allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
             // Update/delete by owner or admin
             allow update, delete: if isOwner(resource.data.userId) || isAdmin();
           }

           // Deliveries collection - buyers can create deliveries for their orders, logistics partners can update
           match /deliveries/{deliveryId} {
             // Allow create if authenticated user is the buyer specified in the new document
             allow create: if isAuthenticated() && request.resource.data.buyerId == request.auth.uid;
             // Allow read for buyers, vendors, logistics partners, and admins
             allow read: if isAuthenticated() && (
               resource.data.buyerId == request.auth.uid || 
               resource.data.vendorId == request.auth.uid || 
               resource.data.logisticsPartnerId == request.auth.uid ||
               isAdmin()
             );
             // Allow update for logistics partners (when assigned) or admins
             allow update: if isAuthenticated() && (
               resource.data.logisticsPartnerId == request.auth.uid ||
               isAdmin()
             );
             // Allow delete for admins only
             allow delete: if isAdmin();
             allow list: if isAuthenticated(); // Allow aggregation queries
           }

           // Logistics companies collection - public can read active companies; owners can write
           match /logistics_companies/{companyId} {
             // Public read for discovery
             allow read: if true;
             allow list: if true;
             // Owners (by ownerUserId) or admins can write
             allow create: if isAuthenticated() && request.auth.uid == request.resource.data.ownerUserId;
             allow update, delete: if (isAuthenticated() && request.auth.uid == resource.data.ownerUserId) || isAdmin();
           }

           // Logistics routes collection - logistics partners can manage their own routes
           match /logistics_routes/{routeId} {
             // Helper function to check if user owns the logistics profile
             function ownsLogisticsProfile(companyId) {
               return exists(/databases/$(database)/documents/logistics_profiles/$(companyId)) &&
                      get(/databases/$(database)/documents/logistics_profiles/$(companyId)).data.userId == request.auth.uid;
             }
             
             allow read: if isAuthenticated() && ownsLogisticsProfile(resource.data.companyId);
             allow create: if isAuthenticated() && ownsLogisticsProfile(request.resource.data.companyId);
             allow update, delete: if isAuthenticated() && ownsLogisticsProfile(resource.data.companyId);
             allow read: if isAdmin(); // Admins can read all routes
             allow list: if isAuthenticated(); // Allow aggregation queries
           }

           // Mail collection - for Firebase Extension (Trigger Email from Firestore)
           match /mail/{mailId} {
             // Authenticated users can create mail documents (to trigger emails)
             allow create: if isAuthenticated();
             // No read access (emails are sent via Extension)
             allow read: if false;
             // Only admins can list/delete mail documents
             allow list, delete: if isAdmin();
           }
         }
       }